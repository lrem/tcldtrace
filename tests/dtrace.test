#!/usr/bin/tclsh

if {[lsearch [namespace children] ::tcltest] == -1} {
	package require tcltest 2.2
	namespace import ::tcltest::*
}

package require dtrace

# Tests not requiring root {{{

# {{{ ::dtrace::open

test "open-1.1" "bad value for instrument" -body {
	::dtrace::open abc
} -returnCodes {1} -result {expected boolean value but got "abc"
::dtrace::open bad usage}

test "open-1.2" "bad option name" -body {
	::dtrace::open -fooshmoo 1 0
} -returnCodes {1} -result {::dtrace::open bad option initialization -fooshmoo}

test "open-1.3" "bad option value" -body {
	::dtrace::open -bufsize abc 0
} -returnCodes {1} -result {::dtrace::open bad option initialization -bufsize}

# }}}

# ::dtrace::close {{{

test "close-1.1" "too few arguments for close" -body {
	::dtrace::close
} -returnCodes {1} -result {wrong # args: should be "::dtrace::close handle"}

test "close-1.2" "too much arguments for close" -body {
	::dtrace::close abc def
} -returnCodes {1} -result {wrong # args: should be "::dtrace::close handle"}

test "close-1.3" "closing invalid handle" -body {
	::dtrace::close 1
} -returnCodes {1} -result {::dtrace::close bad handle}

# }}}

# ::dtrace::configure {{{

test "configure-1.1" "too few arguments for configure" -body {
	::dtrace::configure
} -returnCodes {1} -result {wrong # args: should be "::dtrace::configure handle ?option value ...?"}

test "configure-1.2" "too much arguments for configure" -body {
	::dtrace::configure abc -bufsize 1 abc
} -returnCodes {1} -result {wrong # args: should be "::dtrace::configure handle ?option value ...?"}

test "configure-1.3" "configuring invalid handle" -body {
	::dtrace::configure 0 -bufsize 1
} -returnCodes {1} -result {::dtrace::configure bad handle}

# }}}

# Ensemble test {{{
test "ensemble-1.3" "lookin for ensemble" -constraints \
				{[expr {[info tclversion] >= 8.5}]} -body {
	dtrace close
} -returnCodes {1} -result {wrong # args: should be "dtrace close handle"}

# }}}

# Simple scripts, no output {{{

test "simplescripts-1.1" "opening and closing" -body {
	set h [::dtrace::open 0]
	::dtrace::close $h
}

test "simplescripts-1.2" "opening and double closing" -body {
	set h [::dtrace::open 0]
	::dtrace::close $h
	::dtrace::close $h
} -returnCodes {1} -result {::dtrace::close bad handle}

test "simplescripts-2.1" "configuring" -body {
	set h [::dtrace::open -bufsize 123 0]
	set b [::dtrace::configure $h -bufsize]
	::dtrace::close $h
	return [expr {$b == 123}]
} -result {1}

test "simplescripts-2.2" "configuring" -body {
	set h [::dtrace::open -bufsize 123 0]
	::dtrace::configure $h -bufsize 321
	set b [::dtrace::configure $h -bufsize]
	::dtrace::close $h
	return [expr {$b == 321}]
} -result {1}

test "simplescripts-2.3" "configuring" -body {
	set h [::dtrace::open -bufsize 123 0]
	catch {::dtrace::configure $h -bufsize 321 -fooshmoo 3}
	set b [::dtrace::configure $h -bufsize]
	::dtrace::close $h
	return [expr {$b == 321}]
} -result {1}



# }}}

# }}}

# Tests requiring root {{{

# }}}

cleanupTests

# vim: set foldmethod=marker:
